/* The following code was generated by JFlex 1.7.0 */

package minisql;
import static minisql.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>D:/Users/diego/Documents/GitHub/MiniSQL/src/minisql/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\1\0\1\6\1\4\22\0\1\7\1\54\1\0"+
    "\1\66\1\0\1\3\1\56\1\70\1\62\1\63\1\11\1\53\1\3"+
    "\1\10\1\57\1\12\1\14\1\17\10\2\1\0\1\3\1\54\1\55"+
    "\1\54\1\0\1\3\1\24\1\25\1\32\1\34\1\31\1\50\1\42"+
    "\1\37\1\33\1\51\1\43\1\22\1\47\1\20\1\27\1\44\1\52"+
    "\1\35\1\26\1\30\1\21\1\41\1\45\1\16\1\36\1\40\1\60"+
    "\1\0\1\61\1\0\1\46\1\0\2\1\2\1\1\67\1\1\21\23"+
    "\1\15\2\23\1\64\1\13\1\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\1\5\1\6\1\5"+
    "\2\4\1\2\2\7\30\3\2\4\1\2\4\4\1\2"+
    "\1\10\1\0\1\5\2\0\2\3\1\11\15\3\2\11"+
    "\26\3\1\11\2\3\1\11\2\3\1\11\2\3\1\11"+
    "\17\3\2\11\25\3\1\11\34\3\1\0\1\12\1\0"+
    "\1\2\1\0\1\1\12\3\1\11\12\3\1\11\7\3"+
    "\1\11\6\3\1\11\10\3\1\11\4\3\1\11\16\3"+
    "\1\11\21\3\1\11\17\3\1\11\50\3\1\11\3\3"+
    "\1\11\4\3\1\10\3\0\1\5\1\11\41\3\2\11"+
    "\5\3\2\11\7\3\1\0\22\3\1\11\14\3\1\11"+
    "\14\3\1\11\14\3\1\11\5\3\1\11\1\3\1\11"+
    "\35\3\1\11\7\3\1\0\14\3\1\11\32\3\1\11"+
    "\32\3\1\11\1\0\34\3\1\11\10\3\1\0\1\11"+
    "\1\3\1\11\13\3\1\0\10\3\1\11\2\3\1\11"+
    "\2\3\1\11\2\3\1\0\11\3\1\0\10\3\1\0"+
    "\7\3\1\0\2\3\1\11\21\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\344\0\71\0\71"+
    "\0\u011d\0\u0156\0\u018f\0\u01c8\0\253\0\u0201\0\u023a\0\u0273"+
    "\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\162\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a"+
    "\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2"+
    "\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082"+
    "\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u08e8"+
    "\0\71\0\u2412\0\u244b\0\u2484\0\u0a05\0\u24bd\0\u24f6\0\u252f"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17"+
    "\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf"+
    "\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7"+
    "\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537"+
    "\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff"+
    "\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7"+
    "\0\u14ee\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56"+
    "\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e"+
    "\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6"+
    "\0\u26f7\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75"+
    "\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d"+
    "\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305"+
    "\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd"+
    "\0\u4506\0\u453f\0\u4578\0\u4578\0\u45b1\0\u45ea\0\u45ea\0\u4623"+
    "\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb"+
    "\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3"+
    "\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b"+
    "\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43"+
    "\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b"+
    "\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3"+
    "\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b"+
    "\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8\0\u53f1\0\u542a\0\u5463"+
    "\0\u549c\0\u4377\0\u54d5\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2"+
    "\0\u562b\0\u5664\0\u569d\0\u56d6\0\u570f\0\u5748\0\u5781\0\u57ba"+
    "\0\u57f3\0\u582c\0\u5865\0\u589e\0\u58d7\0\u5910\0\u5949\0\u5982"+
    "\0\u59bb\0\u59f4\0\u5a2d\0\u5a66\0\u5a9f\0\u5ad8\0\u5b11\0\u5b4a"+
    "\0\u5b83\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67\0\u5ca0\0\u5cd9\0\u5d12"+
    "\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1\0\u5eda"+
    "\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u6069\0\u60a2"+
    "\0\u60db\0\u6114\0\u614d\0\u6186\0\u61bf\0\u61f8\0\u6231\0\u626a"+
    "\0\u62a3\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0\0\u63f9\0\u6432"+
    "\0\u646b\0\u64a4\0\u64dd\0\u2b32\0\u6516\0\u654f\0\u6588\0\u65c1"+
    "\0\u65fa\0\u6633\0\u666c\0\u66a5\0\u66de\0\u6717\0\u6750\0\u6789"+
    "\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6\0\u68df\0\u6918\0\u6951"+
    "\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0\0\u6b19"+
    "\0\u6b52\0\u6b8b\0\u6bc4\0\u6bfd\0\u6c36\0\u6c6f\0\u296a\0\u6ca8"+
    "\0\u6ce1\0\u6d1a\0\u6d53\0\u6d8c\0\u6dc5\0\u6dfe\0\u6e37\0\u6e70"+
    "\0\u6ea9\0\u6ee2\0\u6f1b\0\u6f54\0\u6f8d\0\u6fc6\0\u6fff\0\u7038"+
    "\0\u7071\0\u4707\0\u70aa\0\u70e3\0\u711c\0\u7155\0\u718e\0\u71c7"+
    "\0\u7200\0\u7239\0\u7272\0\u72ab\0\u72e4\0\u731d\0\u7356\0\u738f"+
    "\0\u73c8\0\u7401\0\u743a\0\u7473\0\u74ac\0\u74e5\0\u751e\0\u7557"+
    "\0\u7590\0\u75c9\0\u7602\0\u763b\0\u2a15\0\u7674\0\u76ad\0\u76e6"+
    "\0\u771f\0\u7758\0\u7791\0\u77ca\0\u7803\0\u783c\0\u7875\0\u78ae"+
    "\0\u78e7\0\u7920\0\u7959\0\u7992\0\u79cb\0\u7a04\0\u7a3d\0\u7a76"+
    "\0\u7aaf\0\u7ae8\0\u7b21\0\u7b5a\0\u7b93\0\u7bcc\0\u7c05\0\u7c3e"+
    "\0\u7c77\0\u7cb0\0\u743a\0\u7ce9\0\u7d22\0\u2cc1\0\u7d5b\0\u7d94"+
    "\0\u7dcd\0\u7e06\0\u7e3f\0\u7e78\0\u7eb1\0\u7eea\0\u2814\0\u7f23"+
    "\0\u7f5c\0\u7f95\0\u7fce\0\u12ed\0\u8007\0\u8040\0\u8079\0\u80b2"+
    "\0\u80eb\0\u8124\0\u815d\0\u8196\0\u81cf\0\u8208\0\u8241\0\u827a"+
    "\0\u82b3\0\u82ec\0\u8325\0\71\0\u835e\0\u8397\0\u83d0\0\u8409"+
    "\0\u8442\0\u847b\0\u84b4\0\u84ed\0\u8526\0\u855f\0\u8598\0\u85d1"+
    "\0\u860a\0\u8643\0\u867c\0\u86b5\0\u86ee\0\u8727\0\u8760\0\u8799"+
    "\0\u87d2\0\u880b\0\u8844\0\u887d\0\u88b6\0\u88ef\0\u8928\0\u8961"+
    "\0\u899a\0\u89d3\0\u8a0c\0\u8a45\0\u8a7e\0\u8ab7\0\u8af0\0\u8b29"+
    "\0\u8b62\0\u8b9b\0\u8bd4\0\u8c0d\0\u8c46\0\u8c7f\0\u8cb8\0\u8cf1"+
    "\0\u8d2a\0\u8d63\0\u8d9c\0\u8dd5\0\u83d0\0\u8e0e\0\u8e47\0\u8e80"+
    "\0\u8eb9\0\u8ef2\0\u8f2b\0\u8f64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\5\1\12\1\13\1\14\2\3\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\3\1\43\1\44\1\45"+
    "\1\3\1\46\2\47\1\50\1\5\1\51\1\5\1\52"+
    "\1\5\1\53\1\5\1\54\1\3\1\55\72\0\2\3"+
    "\11\0\37\3\14\0\1\3\3\0\1\4\11\0\1\4"+
    "\2\0\1\4\37\0\1\56\16\0\1\10\65\0\1\57"+
    "\5\0\1\60\3\0\1\57\2\0\1\57\62\0\1\61"+
    "\72\0\1\5\57\0\1\4\11\0\1\4\2\62\1\4"+
    "\37\0\1\56\12\0\2\3\11\0\5\3\1\63\2\3"+
    "\1\64\2\3\1\65\1\3\1\66\1\67\20\3\14\0"+
    "\1\3\2\0\2\3\11\0\4\3\1\70\5\3\1\71"+
    "\15\3\1\72\6\3\14\0\1\3\2\0\2\3\11\0"+
    "\10\3\1\73\2\3\1\74\1\3\1\75\1\3\1\76"+
    "\17\3\14\0\1\3\2\0\2\3\11\0\4\3\1\77"+
    "\1\100\1\101\2\3\1\102\1\103\1\3\1\104\1\3"+
    "\1\105\1\3\1\106\1\107\3\3\1\110\11\3\14\0"+
    "\1\3\2\0\2\3\11\0\5\3\1\111\2\3\1\112"+
    "\2\3\1\113\1\3\1\114\1\3\1\115\1\3\1\116"+
    "\1\104\14\3\14\0\1\3\2\0\2\3\11\0\5\3"+
    "\1\117\2\3\1\120\2\3\1\121\1\122\1\123\1\124"+
    "\1\125\2\3\1\126\1\127\4\3\1\130\2\3\1\131"+
    "\2\3\1\132\14\0\1\3\2\0\2\3\11\0\4\3"+
    "\1\133\1\134\10\3\1\135\2\3\1\136\3\3\1\137"+
    "\2\3\1\140\3\3\1\141\2\3\14\0\1\3\2\0"+
    "\2\3\11\0\10\3\1\142\1\3\1\143\1\144\1\3"+
    "\1\145\1\3\1\146\1\3\1\147\1\3\1\150\13\3"+
    "\14\0\1\3\2\0\2\3\11\0\2\3\1\151\1\3"+
    "\1\152\1\3\1\153\3\3\1\154\6\3\1\155\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\5\3\1\156\1\157"+
    "\1\3\1\160\2\3\1\161\5\3\1\162\1\3\1\163"+
    "\13\3\14\0\1\3\2\0\2\3\11\0\4\3\1\164"+
    "\5\3\1\165\5\3\1\166\12\3\1\167\1\104\2\3"+
    "\14\0\1\3\2\0\2\3\11\0\5\3\1\170\2\3"+
    "\1\171\1\172\1\3\1\173\1\3\1\174\1\3\1\175"+
    "\1\3\1\176\15\3\14\0\1\3\2\0\2\3\11\0"+
    "\5\3\1\177\2\3\1\200\2\3\1\201\1\3\1\202"+
    "\1\3\1\203\17\3\14\0\1\3\2\0\2\3\11\0"+
    "\15\3\1\204\21\3\14\0\1\3\2\0\2\3\11\0"+
    "\10\3\1\205\2\3\1\206\23\3\14\0\1\3\2\0"+
    "\2\3\11\0\13\3\1\207\23\3\14\0\1\3\2\0"+
    "\2\3\11\0\10\3\1\210\6\3\1\211\17\3\14\0"+
    "\1\3\2\0\2\3\11\0\6\3\1\212\4\3\1\213"+
    "\1\3\1\214\3\3\1\215\15\3\14\0\1\3\2\0"+
    "\2\3\11\0\15\3\1\216\1\3\1\217\17\3\14\0"+
    "\1\3\2\0\2\3\11\0\5\3\1\220\1\221\1\3"+
    "\1\222\2\3\1\223\1\3\1\224\1\3\1\225\1\3"+
    "\1\226\15\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\227\2\3\1\230\3\3\1\231\1\3\1\232\1\3"+
    "\1\233\13\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\234\2\3\1\235\1\3\1\236\1\3\1\237\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\5\3\1\240\1\241"+
    "\1\3\1\242\2\3\1\243\1\3\1\244\1\3\1\245"+
    "\1\3\1\246\15\3\14\0\1\3\2\0\2\3\11\0"+
    "\13\3\1\247\23\3\14\0\1\3\3\0\1\57\11\0"+
    "\1\57\2\0\1\57\126\0\1\5\71\0\1\5\73\0"+
    "\1\5\72\0\1\5\72\0\1\5\71\0\1\5\2\0"+
    "\5\250\1\0\62\250\1\251\2\0\1\56\11\0\1\56"+
    "\2\0\1\56\11\0\1\252\35\0\1\252\3\0\1\57"+
    "\11\0\1\57\2\0\1\57\37\0\1\56\11\0\4\60"+
    "\1\6\1\10\63\60\11\253\1\254\57\253\1\0\2\255"+
    "\11\0\1\255\2\0\1\255\4\0\2\255\3\0\2\255"+
    "\1\0\1\255\13\0\1\255\16\0\1\255\2\0\2\3"+
    "\11\0\6\3\1\256\24\3\1\257\3\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\260\16\3\1\261\3\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\262\7\3"+
    "\1\104\1\3\1\263\20\3\14\0\1\3\2\0\2\3"+
    "\11\0\2\3\1\214\34\3\14\0\1\3\2\0\2\3"+
    "\11\0\23\3\1\204\13\3\14\0\1\3\2\0\2\3"+
    "\11\0\17\3\1\264\7\3\1\265\1\266\6\3\14\0"+
    "\1\3\2\0\2\3\11\0\10\3\1\267\4\3\1\270"+
    "\1\3\1\271\17\3\14\0\1\3\2\0\2\3\11\0"+
    "\20\3\1\272\7\3\1\273\6\3\14\0\1\3\2\0"+
    "\2\3\11\0\4\3\1\274\5\3\1\214\24\3\14\0"+
    "\1\3\2\0\2\3\11\0\10\3\1\275\5\3\1\276"+
    "\12\3\1\273\5\3\14\0\1\3\2\0\2\3\11\0"+
    "\10\3\1\277\14\3\1\300\6\3\1\214\2\3\14\0"+
    "\1\3\2\0\2\3\11\0\4\3\1\301\22\3\1\107"+
    "\7\3\14\0\1\3\2\0\2\3\11\0\20\3\1\104"+
    "\1\3\1\104\14\3\14\0\1\3\2\0\2\3\11\0"+
    "\14\3\1\302\22\3\14\0\1\3\2\0\2\3\11\0"+
    "\6\3\1\303\5\3\1\273\22\3\14\0\1\3\2\0"+
    "\2\3\11\0\12\3\1\304\24\3\14\0\1\3\2\0"+
    "\2\3\11\0\12\3\1\305\3\3\1\104\20\3\14\0"+
    "\1\3\2\0\2\3\11\0\14\3\1\306\22\3\14\0"+
    "\1\3\2\0\2\3\11\0\10\3\1\104\7\3\1\104"+
    "\16\3\14\0\1\3\2\0\2\3\11\0\15\3\1\104"+
    "\21\3\14\0\1\3\2\0\2\3\11\0\26\3\1\104"+
    "\10\3\14\0\1\3\2\0\2\3\11\0\6\3\1\307"+
    "\30\3\14\0\1\3\2\0\2\3\11\0\16\3\1\310"+
    "\20\3\14\0\1\3\2\0\2\3\11\0\14\3\1\311"+
    "\22\3\14\0\1\3\2\0\2\3\11\0\14\3\1\312"+
    "\11\3\1\247\10\3\14\0\1\3\2\0\2\3\11\0"+
    "\14\3\1\313\22\3\14\0\1\3\2\0\2\3\11\0"+
    "\13\3\1\314\1\3\1\315\21\3\14\0\1\3\2\0"+
    "\2\3\11\0\11\3\1\316\21\3\1\104\3\3\14\0"+
    "\1\3\2\0\2\3\11\0\25\3\1\107\11\3\14\0"+
    "\1\3\2\0\2\3\11\0\33\3\1\107\3\3\14\0"+
    "\1\3\2\0\2\3\11\0\10\3\1\317\26\3\14\0"+
    "\1\3\2\0\2\3\11\0\6\3\1\320\3\3\1\321"+
    "\1\3\1\322\1\3\1\323\14\3\1\324\3\3\14\0"+
    "\1\3\2\0\2\3\11\0\21\3\1\325\1\3\1\326"+
    "\13\3\14\0\1\3\2\0\2\3\11\0\24\3\1\107"+
    "\12\3\14\0\1\3\2\0\2\3\11\0\12\3\1\327"+
    "\24\3\14\0\1\3\2\0\2\3\11\0\5\3\1\330"+
    "\31\3\14\0\1\3\2\0\2\3\11\0\10\3\1\331"+
    "\26\3\14\0\1\3\2\0\2\3\11\0\10\3\1\332"+
    "\26\3\14\0\1\3\2\0\2\3\11\0\6\3\1\333"+
    "\30\3\14\0\1\3\2\0\2\3\11\0\6\3\1\216"+
    "\30\3\14\0\1\3\2\0\2\3\11\0\14\3\1\334"+
    "\22\3\14\0\1\3\2\0\2\3\11\0\14\3\1\335"+
    "\22\3\14\0\1\3\2\0\2\3\11\0\20\3\1\273"+
    "\16\3\14\0\1\3\2\0\2\3\11\0\15\3\1\336"+
    "\21\3\14\0\1\3\2\0\2\3\11\0\14\3\1\306"+
    "\1\337\21\3\14\0\1\3\2\0\2\3\11\0\34\3"+
    "\1\340\2\3\14\0\1\3\2\0\2\3\11\0\11\3"+
    "\1\341\25\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\342\21\3\14\0\1\3\2\0\2\3\11\0\30\3"+
    "\1\104\6\3\14\0\1\3\2\0\2\3\11\0\2\3"+
    "\1\343\30\3\1\344\3\3\14\0\1\3\2\0\2\3"+
    "\11\0\33\3\1\345\3\3\14\0\1\3\2\0\2\3"+
    "\11\0\5\3\1\346\2\3\1\347\6\3\1\350\2\3"+
    "\1\351\14\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\352\21\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\353\1\354\1\355\1\356\17\3\14\0\1\3\2\0"+
    "\2\3\11\0\20\3\1\357\16\3\14\0\1\3\2\0"+
    "\2\3\11\0\12\3\1\107\24\3\14\0\1\3\2\0"+
    "\2\3\11\0\16\3\1\360\20\3\14\0\1\3\2\0"+
    "\2\3\11\0\21\3\1\361\15\3\14\0\1\3\2\0"+
    "\2\3\11\0\21\3\1\362\15\3\14\0\1\3\2\0"+
    "\2\3\11\0\5\3\1\363\5\3\1\153\23\3\14\0"+
    "\1\3\2\0\2\3\11\0\12\3\1\364\1\3\1\365"+
    "\22\3\14\0\1\3\2\0\2\3\11\0\4\3\1\366"+
    "\1\367\1\370\1\3\1\371\10\3\1\372\11\3\1\373"+
    "\3\3\14\0\1\3\2\0\2\3\11\0\13\3\1\374"+
    "\1\3\1\375\21\3\14\0\1\3\2\0\2\3\11\0"+
    "\10\3\1\376\4\3\1\377\21\3\14\0\1\3\2\0"+
    "\2\3\11\0\4\3\1\273\5\3\1\u0100\1\3\1\u0101"+
    "\1\3\1\u0102\1\u0103\1\u0104\7\3\1\u0105\6\3\14\0"+
    "\1\3\2\0\2\3\11\0\13\3\1\u0106\23\3\14\0"+
    "\1\3\2\0\2\3\11\0\15\3\1\u0107\21\3\14\0"+
    "\1\3\2\0\2\3\11\0\33\3\1\u0108\3\3\14\0"+
    "\1\3\2\0\2\3\11\0\33\3\1\u0109\3\3\14\0"+
    "\1\3\2\0\2\3\11\0\14\3\1\u010a\5\3\1\104"+
    "\14\3\14\0\1\3\2\0\2\3\11\0\16\3\1\u010b"+
    "\20\3\14\0\1\3\2\0\2\3\11\0\5\3\1\u010c"+
    "\25\3\1\u010d\3\3\14\0\1\3\2\0\2\3\11\0"+
    "\4\3\1\216\1\3\1\u010e\1\3\1\u010f\1\3\1\u0110"+
    "\3\3\1\u0111\15\3\1\u0112\2\3\14\0\1\3\2\0"+
    "\2\3\11\0\10\3\1\u0113\1\3\1\u0114\24\3\14\0"+
    "\1\3\2\0\2\3\11\0\13\3\1\u0109\23\3\14\0"+
    "\1\3\2\0\2\3\11\0\6\3\1\107\30\3\14\0"+
    "\1\3\2\0\2\3\11\0\17\3\1\u0115\17\3\14\0"+
    "\1\3\2\0\2\3\11\0\6\3\1\u0116\22\3\1\u0117"+
    "\5\3\14\0\1\3\2\0\2\3\11\0\6\3\1\u0118"+
    "\1\3\1\u0119\1\3\1\u011a\1\3\1\u011b\1\3\1\u011c"+
    "\6\3\1\u011d\2\3\1\u011e\3\3\1\u011f\2\3\14\0"+
    "\1\3\2\0\2\3\11\0\26\3\1\u0120\10\3\14\0"+
    "\1\3\2\0\2\3\11\0\10\3\1\u0121\26\3\14\0"+
    "\1\3\2\0\2\3\11\0\25\3\1\u0122\11\3\14\0"+
    "\1\3\2\0\2\3\11\0\5\3\1\u0121\1\u0123\30\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\107\32\3"+
    "\14\0\1\3\2\0\2\3\11\0\6\3\1\u0124\12\3"+
    "\1\u0125\15\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\u0126\21\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u0127\23\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u0128\22\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\104\22\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\367\2\3\1\u0129\23\3\14\0\1\3\2\0\2\3"+
    "\11\0\22\3\1\104\14\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u012a\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\11\3\1\u012b\25\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\352\26\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\u012c\5\3\1\104\1\u012d\15\3\14\0"+
    "\1\3\2\0\2\3\11\0\12\3\1\u012e\24\3\14\0"+
    "\1\3\2\0\2\3\11\0\21\3\1\u012f\15\3\14\0"+
    "\1\3\2\0\2\3\11\0\25\3\1\u0130\11\3\14\0"+
    "\1\3\2\0\2\3\11\0\13\3\1\u0131\1\3\1\u0132"+
    "\1\3\1\u0133\17\3\14\0\1\3\2\0\2\3\11\0"+
    "\17\3\1\u0134\17\3\14\0\1\3\2\0\2\3\11\0"+
    "\21\3\1\307\15\3\14\0\1\3\2\0\2\3\11\0"+
    "\14\3\1\u0135\22\3\14\0\1\3\2\0\2\3\11\0"+
    "\17\3\1\u0136\17\3\14\0\1\3\2\0\2\3\11\0"+
    "\15\3\1\u0137\1\3\1\177\17\3\14\0\1\3\2\0"+
    "\2\3\11\0\2\3\1\104\11\3\1\u0138\22\3\14\0"+
    "\1\3\2\0\2\3\11\0\4\3\1\113\13\3\1\u0139"+
    "\16\3\14\0\1\3\2\0\2\3\11\0\21\3\1\267"+
    "\15\3\14\0\1\3\2\0\2\3\11\0\4\3\1\u013a"+
    "\32\3\14\0\1\3\2\0\2\3\11\0\4\3\1\u013b"+
    "\1\3\1\u012a\30\3\14\0\1\3\2\0\2\3\11\0"+
    "\13\3\1\u013c\23\3\14\0\1\3\2\0\2\3\11\0"+
    "\6\3\1\153\30\3\14\0\1\3\2\0\2\3\11\0"+
    "\5\3\1\u013d\13\3\1\u013e\15\3\14\0\1\3\2\0"+
    "\2\3\11\0\14\3\1\u0138\22\3\14\0\1\3\2\0"+
    "\2\3\11\0\6\3\1\u013f\12\3\1\u0140\15\3\14\0"+
    "\1\3\2\0\2\3\11\0\13\3\1\u0141\1\3\1\u0142"+
    "\21\3\14\0\1\3\2\0\2\3\11\0\17\3\1\352"+
    "\17\3\14\0\1\3\3\0\1\u0143\5\0\1\u0144\3\0"+
    "\1\u0143\2\0\1\u0143\33\0\1\u0144\15\0\11\253\1\u0145"+
    "\57\253\11\u0146\1\u0145\1\u0147\56\u0146\1\0\2\3\11\0"+
    "\6\3\1\u0148\30\3\14\0\1\3\2\0\2\3\11\0"+
    "\15\3\1\u0149\21\3\14\0\1\3\2\0\2\3\11\0"+
    "\5\3\1\u014a\11\3\1\u014b\17\3\14\0\1\3\2\0"+
    "\2\3\11\0\15\3\1\u014c\21\3\14\0\1\3\2\0"+
    "\2\3\11\0\15\3\1\104\1\u014d\20\3\14\0\1\3"+
    "\2\0\2\3\11\0\23\3\1\u014e\13\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\352\22\3\1\u014f\14\0"+
    "\1\3\2\0\2\3\11\0\4\3\1\u0150\32\3\14\0"+
    "\1\3\2\0\2\3\11\0\17\3\1\225\17\3\14\0"+
    "\1\3\2\0\2\3\11\0\26\3\1\107\10\3\14\0"+
    "\1\3\2\0\2\3\11\0\21\3\1\104\15\3\14\0"+
    "\1\3\2\0\2\3\11\0\4\3\1\110\32\3\14\0"+
    "\1\3\2\0\2\3\11\0\10\3\1\u0136\26\3\14\0"+
    "\1\3\2\0\2\3\11\0\15\3\1\u0121\21\3\14\0"+
    "\1\3\2\0\2\3\11\0\26\3\1\u0151\10\3\14\0"+
    "\1\3\2\0\2\3\11\0\20\3\1\104\16\3\14\0"+
    "\1\3\2\0\2\3\11\0\10\3\1\u012a\26\3\14\0"+
    "\1\3\2\0\2\3\11\0\20\3\1\u0122\16\3\14\0"+
    "\1\3\2\0\2\3\11\0\15\3\1\u012a\21\3\14\0"+
    "\1\3\2\0\2\3\11\0\15\3\1\u0152\21\3\14\0"+
    "\1\3\2\0\2\3\11\0\23\3\1\u0153\13\3\14\0"+
    "\1\3\2\0\2\3\11\0\13\3\1\u0154\23\3\14\0"+
    "\1\3\2\0\2\3\11\0\13\3\1\u0155\23\3\14\0"+
    "\1\3\2\0\2\3\11\0\15\3\1\u0156\21\3\14\0"+
    "\1\3\2\0\2\3\11\0\17\3\1\u0157\17\3\14\0"+
    "\1\3\2\0\2\3\11\0\27\3\1\104\7\3\14\0"+
    "\1\3\2\0\2\3\11\0\27\3\1\u0129\7\3\14\0"+
    "\1\3\2\0\2\3\11\0\23\3\1\104\13\3\14\0"+
    "\1\3\2\0\2\3\11\0\31\3\1\u0158\5\3\14\0"+
    "\1\3\2\0\2\3\11\0\32\3\1\u0159\4\3\14\0"+
    "\1\3\2\0\2\3\11\0\31\3\1\153\5\3\14\0"+
    "\1\3\2\0\2\3\11\0\10\3\1\307\26\3\14\0"+
    "\1\3\2\0\2\3\11\0\12\3\1\u015a\24\3\14\0"+
    "\1\3\2\0\2\3\11\0\14\3\1\u015b\22\3\14\0"+
    "\1\3\2\0\2\3\11\0\15\3\1\u015c\21\3\14\0"+
    "\1\3\2\0\2\3\11\0\12\3\1\u015d\24\3\14\0"+
    "\1\3\2\0\2\3\11\0\5\3\1\u015e\31\3\14\0"+
    "\1\3\2\0\2\3\11\0\5\3\1\u015f\5\3\1\u013d"+
    "\1\306\22\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\u0160\26\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\217\23\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\u0161\21\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u0162\22\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u0163\22\3\14\0\1\3\2\0\2\3\11\0\16\3"+
    "\1\107\20\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u0164\30\3\14\0\1\3\2\0\2\3\11\0\12\3"+
    "\1\u0165\2\3\1\u0166\1\u0167\12\3\1\u0168\5\3\14\0"+
    "\1\3\2\0\2\3\11\0\15\3\1\u0121\12\3\1\u0105"+
    "\6\3\14\0\1\3\2\0\2\3\11\0\15\3\1\u0169"+
    "\21\3\14\0\1\3\2\0\2\3\11\0\21\3\1\u016a"+
    "\15\3\14\0\1\3\2\0\2\3\11\0\4\3\1\u016b"+
    "\32\3\14\0\1\3\2\0\2\3\11\0\12\3\1\u016c"+
    "\24\3\14\0\1\3\2\0\2\3\11\0\6\3\1\u016d"+
    "\30\3\14\0\1\3\2\0\2\3\11\0\36\3\1\u016e"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u016f\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\30\3\1\u0170\6\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u0171\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\u0154\10\3"+
    "\1\104\21\3\14\0\1\3\2\0\2\3\11\0\4\3"+
    "\1\u0172\12\3\1\u0173\17\3\14\0\1\3\2\0\2\3"+
    "\11\0\26\3\1\u0174\4\3\1\104\3\3\14\0\1\3"+
    "\2\0\2\3\11\0\32\3\1\u0175\4\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\104\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u0176\3\3\1\u0177\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\16\3\1\u013a\20\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u0178\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\12\3\1\u0179\1\3"+
    "\1\104\22\3\14\0\1\3\2\0\2\3\5\0\1\u017a"+
    "\3\0\37\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\u017b\26\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u017c\30\3\14\0\1\3\2\0\2\3\11\0\12\3"+
    "\1\u017d\6\3\1\u017e\15\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\u017f\24\3\14\0\1\3\2\0\2\3"+
    "\11\0\14\3\2\104\1\u0180\20\3\14\0\1\3\2\0"+
    "\2\3\11\0\10\3\1\u0181\26\3\14\0\1\3\2\0"+
    "\2\3\11\0\4\3\1\u0182\5\3\1\u0183\1\3\1\u0184"+
    "\10\3\1\u0185\11\3\14\0\1\3\2\0\2\3\11\0"+
    "\4\3\1\214\32\3\14\0\1\3\2\0\2\3\11\0"+
    "\5\3\1\u0186\1\u0187\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u0188\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\21\3\1\u0189\15\3\14\0\1\3\2\0\2\3"+
    "\11\0\30\3\1\u018a\2\3\1\u018b\3\3\14\0\1\3"+
    "\2\0\2\3\11\0\12\3\1\u014c\24\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u018c\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\21\3\1\u018d\15\3\14\0\1\3"+
    "\2\0\2\3\11\0\16\3\1\u018e\20\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u018f\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\104\1\3\1\u0190\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\6\3\1\u0191\30\3"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u0192\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u0193\1\3"+
    "\1\u0194\17\3\14\0\1\3\2\0\2\3\11\0\5\3"+
    "\1\214\31\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u0195\30\3\14\0\1\3\2\0\2\3\11\0\4\3"+
    "\1\u0196\32\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\u0197\21\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\u0198\4\3\1\104\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\16\3\1\104\20\3\14\0\1\3\2\0\2\3"+
    "\11\0\11\3\1\177\25\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\247\26\3\14\0\1\3\2\0\2\3"+
    "\11\0\15\3\1\u018c\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u0199\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\16\3\1\u019a\20\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u019b\10\3\1\u019c\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u019d\4\3\1\u019e\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\26\3\1\u019f\10\3"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u01a0\1\3"+
    "\1\u01a1\10\3\1\104\7\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\u01a2\24\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u01a3\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\104\3\3\1\u01a4\7\3\1\u01a5\10\3"+
    "\14\0\1\3\2\0\2\3\11\0\10\3\1\u01a6\26\3"+
    "\14\0\1\3\2\0\2\3\11\0\6\3\1\104\11\3"+
    "\1\u01a7\16\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u01a8\22\3\14\0\1\3\2\0\2\3\11\0\5\3"+
    "\1\u01a9\31\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u01aa\23\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u01ab\1\3\1\u01ac\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u01ad\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\15\3\1\u01ae\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\23\3\1\214\13\3\14\0\1\3\2\0\2\3"+
    "\11\0\17\3\1\271\17\3\14\0\1\3\2\0\2\3"+
    "\11\0\20\3\1\u01af\16\3\14\0\1\3\2\0\2\3"+
    "\11\0\5\3\1\u01b0\31\3\14\0\1\3\2\0\2\3"+
    "\11\0\16\3\1\67\3\3\1\u0122\14\3\14\0\1\3"+
    "\2\0\2\3\11\0\31\3\1\104\5\3\14\0\1\3"+
    "\2\0\2\3\11\0\11\3\1\276\25\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\104\23\3\14\0\1\3"+
    "\2\0\2\3\11\0\5\3\1\u0109\31\3\14\0\1\3"+
    "\2\0\2\3\11\0\6\3\1\104\30\3\14\0\1\3"+
    "\2\0\2\3\11\0\6\3\1\u01b1\30\3\14\0\1\3"+
    "\2\0\2\3\11\0\16\3\1\276\20\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\u01b2\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\105\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\16\3\1\u01b3\20\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\214\23\3\14\0\1\3"+
    "\2\0\2\3\11\0\16\3\1\u01b4\20\3\14\0\1\3"+
    "\2\0\2\3\11\0\12\3\1\u01b5\3\3\1\u01b6\11\3"+
    "\1\u019b\6\3\14\0\1\3\2\0\2\3\11\0\4\3"+
    "\1\214\6\3\1\u0121\11\3\1\u01b7\5\3\1\u01b8\3\3"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u01b9\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\23\3\1\u01ba\13\3"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u01bb\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\u01bc\14\3"+
    "\1\107\15\3\14\0\1\3\2\0\2\3\11\0\16\3"+
    "\1\311\20\3\14\0\1\3\2\0\2\3\11\0\5\3"+
    "\1\177\31\3\14\0\1\3\2\0\2\3\11\0\5\3"+
    "\1\u018c\31\3\14\0\1\3\2\0\2\3\11\0\16\3"+
    "\1\105\20\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\214\26\3\14\0\1\3\2\0\2\3\11\0\4\3"+
    "\1\275\32\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u01bd\1\u01be\21\3\14\0\1\3\2\0\2\3\11\0"+
    "\6\3\1\u01bf\6\3\1\104\21\3\14\0\1\3\2\0"+
    "\2\3\11\0\12\3\1\214\24\3\14\0\1\3\2\0"+
    "\2\3\11\0\33\3\1\104\3\3\14\0\1\3\2\0"+
    "\2\3\11\0\15\3\1\u01c0\21\3\14\0\1\3\3\0"+
    "\1\u0143\11\0\1\u0143\2\0\1\u0143\51\0\11\u0146\1\u0145"+
    "\1\10\67\u0146\1\u0145\57\u0146\1\0\2\3\11\0\17\3"+
    "\1\u01c1\17\3\14\0\1\3\2\0\2\3\11\0\21\3"+
    "\1\u01b1\15\3\14\0\1\3\2\0\2\3\11\0\21\3"+
    "\1\276\15\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u01c2\23\3\14\0\1\3\2\0\2\3\11\0\12\3"+
    "\1\104\24\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u01c3\30\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\u01c4\21\3\14\0\1\3\2\0\2\3\11\0\5\3"+
    "\1\107\31\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u01c5\23\3\14\0\1\3\2\0\2\3\11\0\5\3"+
    "\1\u01c6\31\3\14\0\1\3\2\0\2\3\11\0\4\3"+
    "\1\u0128\32\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u01c7\23\3\14\0\1\3\2\0\2\3\11\0\16\3"+
    "\1\375\20\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u018a\30\3\14\0\1\3\2\0\2\3\11\0\21\3"+
    "\1\105\15\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\352\23\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\150\21\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u01c8\30\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u01c9\22\3\14\0\1\3\2\0\2\3\11\0\17\3"+
    "\1\u01ca\17\3\14\0\1\3\2\0\2\3\11\0\16\3"+
    "\1\214\20\3\14\0\1\3\2\0\2\3\11\0\17\3"+
    "\1\u01cb\17\3\14\0\1\3\2\0\2\3\11\0\12\3"+
    "\1\273\24\3\14\0\1\3\2\0\2\3\11\0\21\3"+
    "\1\u01cc\15\3\14\0\1\3\2\0\2\3\11\0\4\3"+
    "\1\u01cd\32\3\14\0\1\3\2\0\2\3\11\0\33\3"+
    "\1\u01ce\3\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\u01cf\21\3\14\0\1\3\2\0\2\3\11\0\20\3"+
    "\1\u0150\16\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u01d0\30\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\375\22\3\14\0\1\3\2\0\2\3\11\0\21\3"+
    "\1\u01d1\15\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\104\2\3\1\u01d2\23\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\u01d3\26\3\14\0\1\3\2\0\2\3"+
    "\11\0\14\3\1\u01d4\22\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u01d5\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\2\3\1\u01d6\15\3\1\u01d7\1\u01d8\14\3\1\u01d9"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u0179\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u01da\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\5\3\1\276\31\3"+
    "\14\0\1\3\2\0\2\3\11\0\12\3\1\u01db\24\3"+
    "\14\0\1\3\2\0\2\3\11\0\13\3\1\u01dc\23\3"+
    "\14\0\1\3\2\0\2\3\11\0\12\3\1\u01dd\11\3"+
    "\1\u01de\12\3\14\0\1\3\2\0\2\3\11\0\12\3"+
    "\1\u01df\24\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u0122\30\3\14\0\1\3\2\0\2\3\11\0\26\3"+
    "\1\273\10\3\14\0\1\3\2\0\2\3\11\0\16\3"+
    "\1\u01e0\20\3\14\0\1\3\2\0\2\3\11\0\21\3"+
    "\1\u01c2\15\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\u015c\26\3\14\0\1\3\2\0\2\3\11\0\30\3"+
    "\1\u01e1\6\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u014c\22\3\14\0\1\3\32\0\1\u01e2\40\0\2\3"+
    "\11\0\30\3\1\107\6\3\14\0\1\3\2\0\2\3"+
    "\11\0\25\3\1\u012a\11\3\14\0\1\3\2\0\2\3"+
    "\11\0\13\3\1\u0121\23\3\14\0\1\3\2\0\2\3"+
    "\11\0\15\3\1\u01e3\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\14\3\1\u01e4\22\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\u01e5\26\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u01e6\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\15\3\1\u01e7\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\14\3\1\u01e8\22\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\u01e9\6\3\1\u01ea\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u01ac\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\33\3\1\352\3\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u01eb\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u01ec\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u01ed\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\214\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\107\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u01ee\21\3\1\u0159\4\3"+
    "\14\0\1\3\2\0\2\3\11\0\27\3\1\u01ef\7\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\u01f0\14\3"+
    "\1\214\15\3\14\0\1\3\2\0\2\3\11\0\21\3"+
    "\1\u01f1\4\3\1\273\10\3\14\0\1\3\2\0\2\3"+
    "\11\0\5\3\1\u01d2\31\3\14\0\1\3\2\0\2\3"+
    "\11\0\17\3\1\u01f2\17\3\14\0\1\3\2\0\2\3"+
    "\11\0\2\3\1\104\34\3\14\0\1\3\2\0\2\3"+
    "\11\0\16\3\1\u01f3\20\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\105\26\3\14\0\1\3\2\0\2\3"+
    "\11\0\14\3\1\u01f4\22\3\14\0\1\3\2\0\2\3"+
    "\11\0\20\3\1\u01f5\16\3\14\0\1\3\2\0\2\3"+
    "\11\0\11\3\1\u01f6\25\3\14\0\1\3\2\0\2\3"+
    "\11\0\6\3\1\u01f7\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\21\3\1\u01f8\15\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\u01f9\26\3\14\0\1\3\2\0\2\3"+
    "\11\0\33\3\1\276\3\3\14\0\1\3\2\0\2\3"+
    "\11\0\5\3\1\u01fa\31\3\14\0\1\3\2\0\2\3"+
    "\11\0\21\3\1\u01fb\15\3\14\0\1\3\2\0\2\3"+
    "\11\0\4\3\1\u01fc\32\3\14\0\1\3\2\0\2\3"+
    "\11\0\17\3\1\u01fd\1\3\1\u01fe\15\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\u01ff\23\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u0166\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\11\3\1\u0200\25\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\u0201\23\3\14\0\1\3"+
    "\2\0\2\3\11\0\5\3\1\u0202\31\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\u0203\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\u0204\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\u01f9\5\3\1\u0205\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\352\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\u0206\32\3"+
    "\14\0\1\3\2\0\2\3\11\0\27\3\1\107\7\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\214\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u0207\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\u0208\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\6\3\1\u0209\30\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u020a\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u010b\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\276\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\367\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u020b\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u020c\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u020d\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u020e\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\10\3\1\u020f\26\3"+
    "\14\0\1\3\2\0\2\3\11\0\34\3\1\u017d\2\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u0210\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u01a7\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u0211\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\221\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u0212\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\34\3\1\u0213\2\3"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u0214\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\34\3\1\104\2\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\276\32\3"+
    "\14\0\1\3\2\0\2\3\11\0\5\3\1\363\31\3"+
    "\14\0\1\3\2\0\2\3\11\0\16\3\1\307\20\3"+
    "\14\0\1\3\2\0\2\3\11\0\31\3\1\352\5\3"+
    "\14\0\1\3\2\0\2\3\11\0\10\3\1\267\26\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\u0215\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u0216\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\u0122\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\12\3\1\u0217\24\3"+
    "\14\0\1\3\2\0\2\3\11\0\13\3\1\u0218\23\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u0219\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u021a\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\10\3\1\104\26\3"+
    "\14\0\1\3\2\0\2\3\11\0\33\3\1\u021b\3\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\367\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\u017d\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\20\3\1\107\16\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\u021c\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\10\3\1\u021d\26\3"+
    "\14\0\1\3\2\0\2\3\11\0\33\3\1\u012a\3\3"+
    "\14\0\1\3\2\0\2\3\11\0\10\3\1\u021e\26\3"+
    "\14\0\1\3\2\0\2\3\11\0\13\3\1\u021f\23\3"+
    "\14\0\1\3\2\0\2\3\11\0\5\3\1\u0220\31\3"+
    "\14\0\1\3\2\0\2\3\11\0\12\3\1\u0221\24\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\125\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\u01b8\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u0222\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\13\3\1\u0223\23\3"+
    "\14\0\1\3\2\0\2\3\11\0\6\3\1\u0187\1\3"+
    "\1\u013b\26\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u0224\23\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u0225\22\3\14\0\1\3\17\0\1\u0226\53\0\2\3"+
    "\11\0\4\3\1\u0227\32\3\14\0\1\3\2\0\2\3"+
    "\11\0\15\3\1\u0228\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\20\3\1\u0229\16\3\14\0\1\3\2\0\2\3"+
    "\11\0\13\3\1\110\23\3\14\0\1\3\2\0\2\3"+
    "\11\0\16\3\1\u01e1\20\3\14\0\1\3\2\0\2\3"+
    "\11\0\21\3\1\u022a\15\3\14\0\1\3\2\0\2\3"+
    "\11\0\17\3\1\u022b\17\3\14\0\1\3\2\0\2\3"+
    "\11\0\4\3\1\u014f\32\3\14\0\1\3\2\0\2\3"+
    "\11\0\14\3\1\u022c\22\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\331\24\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\u022d\24\3\14\0\1\3\2\0\2\3"+
    "\11\0\16\3\1\u022e\20\3\14\0\1\3\2\0\2\3"+
    "\11\0\30\3\1\u022f\6\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\u0230\24\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\320\12\3\1\276\11\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u0231\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u0232\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u0233\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\375\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\153\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u0234\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\21\3\1\107\15\3\14\0\1\3"+
    "\2\0\2\3\11\0\6\3\1\214\30\3\14\0\1\3"+
    "\2\0\2\3\11\0\21\3\1\u0235\15\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\u01ca\23\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u015c\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u0236\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u0237\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u01c4\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\5\3\1\367\31\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u0238\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\120\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\66\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u015c\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\34\3\1\u0239\2\3\14\0\1\3"+
    "\2\0\2\3\11\0\16\3\1\u0195\20\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u023a\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\13\3\1\u01c4\23\3\14\0\1\3"+
    "\2\0\2\3\11\0\20\3\1\u023b\16\3\14\0\1\3"+
    "\2\0\2\3\11\0\21\3\1\120\15\3\14\0\1\3"+
    "\2\0\2\3\11\0\12\3\1\306\24\3\14\0\1\3"+
    "\2\0\2\3\11\0\6\3\1\u023c\30\3\14\0\1\3"+
    "\2\0\2\3\11\0\21\3\1\216\15\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u023d\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\25\3\1\273\11\3\14\0\1\3"+
    "\2\0\2\3\11\0\26\3\1\352\10\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u023e\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u023f\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u0240\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u0241\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\u0242\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u0243\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\u0244\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u0245\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\32\3\1\u0246\4\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u0122\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\30\3\1\u014c\6\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\u0247\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\31\3\1\u0248\5\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u020f\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u0249\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\170\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u024a\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u024b\32\3\14\0\1\3"+
    "\32\0\1\u024c\40\0\2\3\11\0\14\3\1\u024d\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\u024e\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u024f\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\10\3\1\u0250\26\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\u0251\32\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\104\1\3"+
    "\1\u0157\17\3\14\0\1\3\2\0\2\3\11\0\30\3"+
    "\1\u0252\6\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u0253\22\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u01d0\23\3\14\0\1\3\2\0\2\3\11\0\17\3"+
    "\1\u01a6\17\3\14\0\1\3\2\0\2\3\11\0\6\3"+
    "\1\u0254\30\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u017d\22\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u0255\22\3\14\0\1\3\2\0\2\3\11\0\11\3"+
    "\1\107\16\3\1\u0232\6\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\u010c\4\3\1\275\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\11\3\1\u0256\25\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\320\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\20\3\1\u0257\16\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u0258\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\4\3\1\u0259\32\3\14\0\1\3"+
    "\2\0\2\3\11\0\5\3\1\u01f9\31\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u025a\21\3\14\0\1\3"+
    "\2\0\2\3\4\0\1\u025b\4\0\37\3\14\0\1\3"+
    "\2\0\2\3\11\0\16\3\1\u0232\20\3\14\0\1\3"+
    "\2\0\2\3\11\0\2\3\1\u025c\34\3\14\0\1\3"+
    "\2\0\2\3\11\0\24\3\1\u0195\12\3\14\0\1\3"+
    "\2\0\2\3\11\0\26\3\1\113\10\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u025d\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\22\3\1\u025e\14\3\14\0\1\3"+
    "\2\0\2\3\11\0\16\3\1\u025f\20\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u0260\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\12\3\1\u0261\24\3\14\0\1\3"+
    "\2\0\2\3\11\0\33\3\1\u0262\3\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u0263\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\25\3\1\u0185\11\3\14\0\1\3"+
    "\33\0\1\u0264\37\0\2\3\11\0\32\3\1\u0265\4\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\275\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u0266\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\12\3\1\u0267\24\3"+
    "\14\0\1\3\2\0\2\3\11\0\13\3\1\u0268\23\3"+
    "\14\0\1\3\2\0\2\3\11\0\15\3\1\u0269\21\3"+
    "\14\0\1\3\2\0\2\3\11\0\22\3\1\u026a\14\3"+
    "\14\0\1\3\2\0\2\3\11\0\5\3\1\u026b\31\3"+
    "\14\0\1\3\2\0\2\3\11\0\16\3\1\u026c\20\3"+
    "\14\0\1\3\2\0\2\3\11\0\26\3\1\u023b\10\3"+
    "\14\0\1\3\2\0\2\3\11\0\16\3\1\261\20\3"+
    "\14\0\1\3\2\0\2\3\11\0\26\3\1\261\10\3"+
    "\14\0\1\3\43\0\1\u026d\27\0\2\3\11\0\14\3"+
    "\1\u0267\22\3\14\0\1\3\2\0\2\3\11\0\16\3"+
    "\1\u014c\20\3\14\0\1\3\2\0\2\3\11\0\10\3"+
    "\1\u026e\26\3\14\0\1\3\2\0\2\3\11\0\12\3"+
    "\1\u026f\14\3\1\u0270\7\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\u0271\24\3\14\0\1\3\2\0\2\3"+
    "\11\0\15\3\1\214\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\30\3\1\177\6\3\14\0\1\3\2\0\2\3"+
    "\11\0\32\3\1\u0272\4\3\14\0\1\3\2\0\2\3"+
    "\11\0\5\3\1\u015e\6\3\1\u0273\3\3\1\375\16\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\u0274\32\3"+
    "\14\0\1\3\2\0\2\3\11\0\14\3\1\u0275\22\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\277\32\3"+
    "\14\0\1\3\2\0\2\3\11\0\21\3\1\313\15\3"+
    "\14\0\1\3\2\0\2\3\11\0\16\3\1\u026c\13\3"+
    "\1\u0276\4\3\14\0\1\3\2\0\2\3\11\0\14\3"+
    "\1\u024e\22\3\14\0\1\3\2\0\2\3\11\0\13\3"+
    "\1\u012a\23\3\14\0\1\3\36\0\1\u0277\34\0\2\3"+
    "\11\0\5\3\1\u0278\31\3\14\0\1\3\2\0\2\3"+
    "\11\0\17\3\1\u0279\17\3\14\0\1\3\2\0\2\3"+
    "\11\0\15\3\1\u027a\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\13\3\1\u027b\23\3\14\0\1\3\2\0\2\3"+
    "\11\0\23\3\1\u027c\7\3\1\u027d\3\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u027e\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\u020a\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u010c\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u027f\17\3\14\0\1\3"+
    "\30\0\1\u0280\42\0\2\3\11\0\20\3\1\u018b\16\3"+
    "\14\0\1\3\2\0\2\3\11\0\33\3\1\u0281\3\3"+
    "\14\0\1\3\2\0\2\3\11\0\22\3\1\u0282\14\3"+
    "\14\0\1\3\2\0\2\3\11\0\5\3\1\u0283\31\3"+
    "\14\0\1\3\2\0\2\3\11\0\13\3\1\u0284\23\3"+
    "\14\0\1\3\2\0\2\3\11\0\17\3\1\u0285\17\3"+
    "\14\0\1\3\2\0\2\3\11\0\33\3\1\u0286\3\3"+
    "\14\0\1\3\2\0\2\3\11\0\4\3\1\u0287\32\3"+
    "\14\0\1\3\22\0\1\u0288\50\0\2\3\11\0\17\3"+
    "\1\u0289\17\3\14\0\1\3\2\0\2\3\11\0\30\3"+
    "\1\u028a\6\3\14\0\1\3\2\0\2\3\11\0\21\3"+
    "\1\331\15\3\14\0\1\3\2\0\2\3\11\0\5\3"+
    "\1\u0121\31\3\14\0\1\3\2\0\2\3\11\0\4\3"+
    "\1\u018a\32\3\14\0\1\3\2\0\2\3\11\0\15\3"+
    "\1\u028b\21\3\14\0\1\3\2\0\2\3\11\0\12\3"+
    "\1\u0185\24\3\14\0\1\3\45\0\1\u0264\25\0\2\3"+
    "\11\0\6\3\1\u028c\30\3\14\0\1\3\2\0\2\3"+
    "\11\0\23\3\1\u028d\13\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\u01dd\24\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\u028e\26\3\14\0\1\3\2\0\2\3"+
    "\11\0\21\3\1\u028f\15\3\14\0\1\3\2\0\2\3"+
    "\11\0\21\3\1\u0290\15\3\14\0\1\3\2\0\2\3"+
    "\11\0\10\3\1\u0291\26\3\14\0\1\3\2\0\2\3"+
    "\11\0\17\3\1\u0292\17\3\14\0\1\3\2\0\2\3"+
    "\11\0\12\3\1\u0293\24\3\14\0\1\3\2\0\2\3"+
    "\11\0\14\3\1\u0294\22\3\14\0\1\3\2\0\2\3"+
    "\11\0\15\3\1\u0295\21\3\14\0\1\3\2\0\2\3"+
    "\11\0\22\3\1\u0296\14\3\14\0\1\3\2\0\2\3"+
    "\11\0\14\3\1\u0275\3\3\1\u0297\16\3\14\0\1\3"+
    "\2\0\2\3\11\0\15\3\1\u0298\21\3\14\0\1\3"+
    "\2\0\2\3\11\0\14\3\1\u0299\22\3\14\0\1\3"+
    "\2\0\2\3\11\0\10\3\1\u029a\26\3\14\0\1\3"+
    "\2\0\2\3\11\0\17\3\1\u029b\17\3\14\0\1\3"+
    "\2\0\2\3\11\0\6\3\1\u029c\30\3\14\0\1\3"+
    "\2\0\2\3\11\0\12\3\1\u0295\24\3\14\0\1\3"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36765];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\1\1\2\11\46\1\1\0"+
    "\1\1\2\0\165\1\1\0\1\11\1\0\1\1\1\0"+
    "\227\1\3\0\63\1\1\0\147\1\1\0\103\1\1\0"+
    "\45\1\1\0\16\1\1\0\10\1\1\11\10\1\1\0"+
    "\11\1\1\0\10\1\1\0\7\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public String lexeme;
        public String column;
        public String line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { line=Integer.toString(yyline+1);column=Integer.toString(yycolumn+1);return CONSTANTE_ENTERA;
            } 
            // fall through
          case 11: break;
          case 2: 
            { line=Integer.toString(yyline+1);column=Integer.toString(yycolumn+1);return ERROR;
            } 
            // fall through
          case 12: break;
          case 3: 
            { line=Integer.toString(yyline+1);column=Integer.toString(yycolumn+1);return IDENTIFICADOR;
            } 
            // fall through
          case 13: break;
          case 4: 
            { line=Integer.toString(yyline+1);column=Integer.toString(yycolumn+1);return PUNTUACION;
            } 
            // fall through
          case 14: break;
          case 5: 
            { /* ignore */
            } 
            // fall through
          case 15: break;
          case 6: 
            { return SALTO;
            } 
            // fall through
          case 16: break;
          case 7: 
            { line=Integer.toString(yyline+1);column=Integer.toString(yycolumn+1);return CONSTANTE_BOOLEANA;
            } 
            // fall through
          case 17: break;
          case 8: 
            { line=Integer.toString(yyline+1);column=Integer.toString(yycolumn+1); return FLOAT;
            } 
            // fall through
          case 18: break;
          case 9: 
            { line=Integer.toString(yyline+1);column=Integer.toString(yycolumn+1); return RESERVADA;
            } 
            // fall through
          case 19: break;
          case 10: 
            { line=Integer.toString(yyline+1);column=Integer.toString(yycolumn+1);return STRING;
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
