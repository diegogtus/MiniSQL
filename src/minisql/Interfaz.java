/*
 * Copyright (C) 2019 diego
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package minisql;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author diego
 */
public class Interfaz extends javax.swing.JFrame {
    
    String NombreArchivo=null;
    List TokenList;
    Integer Position;
    /** Creates new form Interfaz */
    public Interfaz() {
        this.Position = 0;
        this.TokenList = new ArrayList();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button1 = new java.awt.Button();
        label1 = new java.awt.Label();
        txt_path = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txta_Input = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txta_Output = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        button1.setLabel("Cargar");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        label1.setText("Ruta:");

        txt_path.setEditable(false);
        txt_path.setName("txt_path"); // NOI18N

        txta_Input.setColumns(20);
        txta_Input.setRows(5);
        jScrollPane1.setViewportView(txta_Input);

        txta_Output.setColumns(20);
        txta_Output.setRows(5);
        jScrollPane2.setViewportView(txta_Output);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(txt_path, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(17, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(115, 115, 115))))
        );

        button1.getAccessibleContext().setAccessibleName("btn_Cargar");
        label1.getAccessibleContext().setAccessibleName("lbl_Ruta");
        txt_path.getAccessibleContext().setAccessibleName("txt_path");
        txt_path.getAccessibleContext().setAccessibleDescription("");
        jButton1.getAccessibleContext().setAccessibleName("btn_Analizar");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
         JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", 
                "txt", "text","frag");
        fc.setFileFilter(filter);
        if( fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION ){
            txt_path.setText(fc.getSelectedFile().getAbsolutePath());
            txta_Input.setText("");
            leer();            
        }
    }//GEN-LAST:event_button1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            txta_Output.setText("");
            ProbarLexerFile(txt_path.getText() );//llamando al metodo ProbarLexerFile();
            Escritor();
        }
        catch(IOException ex){
        System.out.println(ex.getMessage());}
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label1;
    private javax.swing.JTextField txt_path;
    private javax.swing.JTextArea txta_Input;
    private javax.swing.JTextArea txta_Output;
    // End of variables declaration//GEN-END:variables

    private void leer() {
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        try {
			// Apertura del fichero y creacion de BufferedReader para poder
			// hacer una lectura comoda (disponer del metodo readLine()).
			archivo = new File (txt_path.getText());
                        NombreArchivo=archivo.getName();
                        NombreArchivo=NombreArchivo.replace(".txt", "");
                        fr = new FileReader (archivo);
			br = new BufferedReader(fr);
			// Lectura del fichero
			String linea;
			while((linea=br.readLine())!=null)
				txta_Input.append(linea + '\n');           
        }
        catch(Exception e){
           e.printStackTrace();
        }finally{
           // En el finally cerramos el fichero, para asegurarnos
           // que se cierra tanto si todo va bien como si salta 
           // una excepcion.
           try{
              if( null != fr ){
                 fr.close();
              }
           }catch (Exception e2){
              e2.printStackTrace();
           }
        }
    }

    private void Escritor() {
        File fichero=new File(NombreArchivo+".out");//creando fichero txt en raiz
        PrintWriter writer;
        try{
            writer=new PrintWriter(fichero);
            writer.print(txta_Output.getText());//ingresado ecuacion
            writer.close();
            JOptionPane.showMessageDialog(null, 
                    "InfoBox: Se ha analizado con éxito el archivo y se ha "
                            + "creado un archivo de salida en la carpeta raíz llamado "
                            +NombreArchivo, "¡ATENCIÓN!",JOptionPane.INFORMATION_MESSAGE);
        }
        catch(FileNotFoundException ex){
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void ProbarLexerFile(String path) throws IOException{
    Reader reader;
    reader = new BufferedReader(new FileReader(path));
    Lexer lexer=new Lexer(reader);
    //se comienza a evaluar cada caracter
    while(true){
        Token token=lexer.yylex();
                
   
        if(token==null){
            txta_Output.append("FIN");//mostrando los resultados
            Analyzer();
            return;
        }//termina evaluacion
        switch(token){
            case ERROR:
      
                txta_Output.append("*** Error line "+ lexer.line+
                    "** Unrecognized char: '"+lexer.yytext()+"'"
                    + "\n");
                txta_Output.append("\n");
                break;
       
            case IDENTIFICADOR: //aqui se guardan las variables y los numeros
                    TokenList.add(token);
                    if(lexer.yylength()>31){
                        txta_Output.append(lexer.yytext()+"***Truncado por el largo***");
                    }
                    else{
                        
                        txta_Output.append(lexer.yytext()+"           line "+lexer.line+
                       " column "+ lexer.column+"-"+(Integer.parseInt(lexer.column)+lexer.yylength())+ " is " +token+" "+"\n");
                        txta_Output.append("\n");
                    }
                break;
                
            case SALTO:
            case RESERVADA:
            case PUNTUACION:
            case CONSTANTE_BOOLEANA:
            case CONSTANTE_ENTERA:
            case STRING:
            case OPERADOR:
            case SUMA:
            case RESTA:
            case MULTIPLICACION:
            case DIVISION:
            case PORCENTAJE:
            case MENOR:
            case MENORIGUAL:
            case MAYOR:
            case MAYORIGUAL:
            case ASIGNAR:
            case IGUAL:
            case DIFERENTE:
            case NEGACION:
            case PUNTOYCOMA:
            case COMA:
            case PUNTO:
            case CORCHETEIZQ:
            case CORCHETEDER:
            case PARENTESISIZQ:
            case PARENTESISDER:
            case LLAVEIZQ:
            case LLAVEDER:
            case CORCHETES:
            case PARENTESIS:
            case LLAVES:
            case ARROBA:
            case NUMERAL:
            case DOBLENUMERAL:
            case ABSOLUTE:
            case ACTION:
            case ADA:
            case ADD:
            case ALL:
            case ALLOCATE:
            case ALTER:
            case AND:
            case ANY:
            case ARE:
            case AS:
            case ASC:
            case ASSERTION:
            case AT:
            case AUTHORIZATION:
            case AVG:
            case BACKUP:
            case BEGIN:
            case BETWEEN:
            case BIT:
            case BIT_LENGTH:
            case BOTH:
            case BREAK:
            case BROWSE:
            case BULK:
            case BY:
            case CASCADE:
            case CASCADED:
            case CASE:
            case CAST:
            case CATALOG:
            case CHAR:
            case CHAR_LENGTH:
            case CHARACTER:
            case CHARACTER_LENGTH:
            case CHECK:
            case CHECKPOINT:
            case CLOSE:
            case CLUSTERED:
            case COALESCE:
            case COLLATE:
            case COLLATION:
            case COLUMN:
            case COMMIT:
            case COMPUTE:
            case CONNECT:
            case CONNECTION:
            case CONSTRAINT:
            case CONSTRAINTS:
            case CONTAINS:
            case CONTAINSTABLE:
            case CONTINUE:
            case CONVERT:
            case CORRESPONDING:
            case COUNT:
            case CREATE:
            case CROSS:
            case CURRENT:
            case CURRENT_DATE:
            case CURRENT_TIME:
            case CURRENT_TIMESTAMP:
            case CURRENT_USER:
            case CURSOR:
            case DATABASE:
            case DATE:
            case DAY:
            case DBCC:
            case DEALLOCATE:
            case DEC:
            case DECIMAL:
            case DECLARE:
            case DEFAULT:
            case DEFERRABLE:
            case DEFERRED:
            case DELETE:
            case DENY:
            case DESC:
            case DESCRIBE:
            case DESCRIPTOR:
            case DIAGNOSTICS:
            case DISCONNECT:
            case DISK:
            case DISTINCT:
            case DISTRIBUTED:
            case DOMAIN:
            case DOUBLE:
            case DROP:
            case DUMP:
            case ELSE:
            case END:
            case END_EXEC:
            case ERRLVL:
            case ESCAPE:
            case EXCEPT:
            case EXCEPTION:
            case EXEC:
            case EXECUTE:
            case EXISTS:
            case EXIT:
            case EXTERNAL:
            case EXTRACT:
            case FALSE:
            case FETCH:
            case FILE:
            case FILLFACTOR:
            case FIRST:
            case FLOAT:
            case FOR:
            case FOREIGN:
            case FORTRAN:
            case FOUND:
            case FREETEXT:
            case FREETEXTTABLE:
            case FROM:
            case FULL:
            case FUNCTION:
            case GET:
            case GLOBAL:
            case GO:
            case GOTO:
            case GRANT:
            case GROUP:
            case HAVING:
            case HOLDLOCK:
            case HOUR:
            case IDENTITY:
            case IDENTITY_INSERT:
            case IDENTITYCOL:
            case IF:
            case IMMEDIATE:
            case IN:
            case INCLUDE:
            case INDEX:
            case INDICATOR:
            case INITIALLY:
            case INNER:
            case INPUT:
            case INSENSITIVE:
            case INSERT:
            case INT:
            case INTEGER:
            case INTERSECT:
            case INTERVAL:
            case INTO:
            case IS:
            case ISOLATION:
            case JOIN:
            case KEY:
            case KILL:
            case LANGUAGE:
            case LAST:
            case LEADING:
            case LEFT:
            case LEVEL:
            case LIKE:
            case LINENO:
            case LOAD:
            case LOCAL:
            case LOWER:
            case MATCH:
            case MAX:
            case MERGE:
            case MIN:
            case MINUTE:
            case MODULE:
            case MONTH:
            case NAMES:
            case NATIONAL:
            case NATURAL:
            case NCHAR:
            case NEXT:
            case NO:
            case NOCHECK:
            case NONCLUSTERED:
            case NONE:
            case NOT:
            case NULL:
            case NULLIF:
            case NUMERIC:
            case OCTET_LENGTH:
            case OF:
            case OFF:
            case OFFSETS:
            case ON:
            case ONLY:
            case OPEN:
            case OPENDATASOURCE:
            case OPENQUERY:
            case OPENROWSET:
            case OPENXML:
            case OPTION:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case OVER:
            case OVERLAPS:
            case PAD:
            case PARTIAL:
            case PASCAL:
            case PERCENT:
            case PIVOT:
            case PLAN:
            case POSITION:
            case PRECISION:
            case PREPARE:
            case PRESERVE:
            case PRIMARY:
            case PRINT:
            case PRIOR:
            case PRIVILEGES:
            case PROC:
            case PROCEDURE:
            case PUBLIC:
            case RAISERROR:
            case READ:
            case READTEXT:
            case REAL:
            case RECONFIGURE:
            case REFERENCES:
            case RELATIVE:
            case REPLICATION:
            case RESTORE:
            case RESTRICT:
            case RETURN:
            case REVERT:
            case REVOKE:
            case RIGHT:
            case ROLLBACK:
            case ROWCOUNT:
            case ROWGUIDCOL:
            case ROWS:
            case RULE:
            case SAVE:
            case SCHEMA:
            case SCROLL:
            case SECOND:
            case SECTION:
            case SECURITYAUDIT:
            case SELECT:
            case SEMANTICKEYPHRASETABLE:
            case SEMANTICSIMILARITYDETAILSTABLE:
            case SEMANTICSIMILARITYTABLE:
            case SESSION:
            case SESSION_USER:
            case SET:
            case SETUSER:
            case SHUTDOWN:
            case SIZE:
            case SMALLINT:
            case SOME:
            case SPACE:
            case SQL:
            case SQLCA:
            case SQLCODE:
            case SQLERROR:
            case SQLSTATE:
            case SQLWARNING:
            case STATISTICS:
            case SUBSTRING:
            case SUM:
            case SYSTEM_USER:
            case TABLE:
            case TABLESAMPLE:
            case TEMPORARY:
            case TEXTSIZE:
            case THEN:
            case TIME:
            case TIMESTAMP:
            case TIMEZONE_HOUR:
            case TIMEZONE_MINUTE:
            case TO:
            case TOP:
            case TRAILING:
            case TRAN:
            case TRANSACTION:
            case TRANSLATE:
            case TRANSLATION:
            case TRIGGER:
            case TRIM:
            case TRUE:
            case TRUNCATE:
            case TRY_CONVERT:
            case TSEQUAL:
            case UNION:
            case UNIQUE:
            case UNKNOWN:
            case UNPIVOT:
            case UPDATE:
            case UPDATETEXT:
            case UPPER:
            case USAGE:
            case USE:
            case USER:
            case USING:
            case VALUE:
            case VALUES:
            case VARCHAR:
            case VARYING:
            case VIEW:
            case WAITFOR:
            case WHEN:
            case WHENEVER:
            case WHERE:
            case WHILE:
            case WITH:
            case WITHINGROUP:
            case WORK:
            case WRITE:
            case WRITETEXT:
            case YEAR:
            case ZONE://aqui se guardan las variables y los numeros
                TokenList.add(token);
                txta_Output.append(lexer.yytext()+"           line "+lexer.line+
                       " column "+  lexer.column+"-"+(Integer.parseInt(lexer.column)+lexer.yylength())+ " is " +token+" "+"\n");
                txta_Output.append("\n");
                break;
            default:
                break;
        }	
    }	
}//termina mi edicion

    private void Analyzer() {
        while(Position<TokenList.size()){
            switch (TokenList.get(Position).toString()){
                case "ALTER":
                    Position++;
                    break;
                case "CREATE":
                    Position++;
                    break;
                case "DROP":
                    Position++;
                    switch(TokenList.get(Position).toString()){
                        case "TABLE":
                            Position=Position-1;
                            DropT();
                            break;
                        case "DATABASE":
                            DropD();
                            break;
                        case "LOGIN":
                            DropL();
                            break;
                        case "INDEX":
                            DropI();
                            break;
                        case "VIEW":
                            DropV();
                            break;    
                        default:
                           // Look4SemiColon();
                            Position++;
                            JOptionPane.showMessageDialog(null, 
                    "ERROR"+NombreArchivo, "¡ERROR EN SINTAXIS DROP!",JOptionPane.WARNING_MESSAGE);
                            Analyzer();
                            break;
                    }
                    break;
                case "TRUNCATE":
                    Position++;
                    break;
                case "UPDATE":
                    Position++;
                    break;
                case "ERROR":
                default:
                    Position++;
                    Look4SemiColon();
                            JOptionPane.showMessageDialog(null, 
                    "ERROR"+NombreArchivo, "¡ERROR EN SINTAXIS DROP!",JOptionPane.WARNING_MESSAGE);
                    break;
                }
       }
    }
    private void DropT() {
        switch(TokenList.get(Position).toString()){
            case "DROP":
                Position++;
                switch(TokenList.get(Position).toString()){
                    case "TABLE":
                        Position++;
                        DropT2();
                        break;
                    default:
                        Analyzer();
                        break;
                }
                break;
            default:
                Analyzer();
                break;
        }
    }
    private void DropT2() {
        switch(TokenList.get(Position).toString()){
            case "IF":
                Position++;
                switch(TokenList.get(Position).toString()){
                    case "EXISTS":
                        Position++;
                        DropT3();
                        break;
                    default:
                        break;
                }
                break;
            default:
                Position++;
                DropT3();
                break;
        }
    }
    private void DropT3() {
        switch(TokenList.get(Position).toString()){
            //MODIFICAR LUEGO ESTE METODO
            case "OBJECT":
                Position++;
                DropT4();
                break;
            default:
                Look4SemiColon();
                break;
        }
    }
    
    private void DropT4() {
        switch(TokenList.get(Position).toString()){
            case ",":
                Position++;
                DropT3();
                break;
            case ";":
                Position++;
                Analyzer();
                JOptionPane.showMessageDialog(null, 
                    "BIEN"+NombreArchivo, "¡BIEN!",JOptionPane.WARNING_MESSAGE);
                break;
            default:
                Position++;
                Analyzer();
                break;
        }
    }
    
    private void DropD() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void DropL() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void DropI() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void DropV() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }   


    private void Look4SemiColon() {
        txta_Output.append("ERROR DE SINTAXIS EN TOKEN "+ Position.toString());
        for (int i = Position; i < TokenList.size()-1 ; i++) {
            if (TokenList.get(Position)==";") {
                Analyzer();
            }
        }
    }
}
